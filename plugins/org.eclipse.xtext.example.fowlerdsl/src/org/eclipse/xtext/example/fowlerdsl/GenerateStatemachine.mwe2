module org.eclipse.xtext.example.fowlerdsl.GenerateStatemachine

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var fileExtensions = "statemachine"
var projectName = "org.eclipse.xtext.example.fowlerdsl"
var grammarURI = "platform:/resource/${projectName}/src/org/eclipse/xtext/example/fowlerdsl/Statemachine.xtext"
var runtimeProject = "../../plugins/${projectName}"
var generateXtendStub = false
var encoding = "UTF-8"

Workflow {
    bean = StandaloneSetup {
    	resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}
        platformUri = "${runtimeProject}/.."
    }

	component = DirectoryCleaner {  directory = "${runtimeProject}/src-gen"     }
	component = DirectoryCleaner {  directory = "${runtimeProject}/model"       }
	component = DirectoryCleaner {  directory = "${runtimeProject}.ui/src-gen"  }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
		encoding = encoding
        language = {
    		forcedResourceSet = theResourceSet
            uri = grammarURI
    		fragment = grammarAccess.GrammarAccessFragment auto-inject {}
    		fragment = ecore.EMFGeneratorFragment auto-inject {  javaModelDirectory = "../${projectName}/src-gen"  }
    		fragment = serializer.SerializerFragment auto-inject {  generateStub = false  }
    		fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
    		fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
            fragment = validation.JavaValidatorFragment auto-inject {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }
            fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
            fragment = exporting.QualifiedNamesFragment auto-inject {}
            fragment = builder.BuilderIntegrationFragment auto-inject {}
            fragment = generator.GeneratorFragment auto-inject {
                generateMwe = true
                generateJavaMain = true
            }
            fragment = formatting.FormatterFragment auto-inject {}
            fragment = labeling.LabelProviderFragment auto-inject {}
            fragment = outline.OutlineTreeProviderFragment auto-inject {}
            fragment = outline.QuickOutlineFragment auto-inject {}
            fragment = quickfix.QuickfixProviderFragment auto-inject {}
            fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
            fragment = types.TypesGeneratorFragment auto-inject {}
            fragment = xbase.XbaseGeneratorFragment auto-inject {}
            fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
            fragment = refactoring.RefactorElementNameFragment auto-inject {}
            fragment = compare.CompareFragment auto-inject {}
        }
    }
}
